import com.github.triplet.gradle.androidpublisher.ReleaseStatus

apply plugin: 'com.android.application'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.appdistribution'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.github.triplet.play'
apply from: '../tests.gradle'

kotlin {
    jvmToolchain(11)
}

android {
    compileSdkVersion compileVersion
    flavorDimensions "default"
    defaultConfig {
        applicationId "jp.co.soramitsu.sora"
        minSdkVersion minVersion
        targetSdkVersion targetVersion
        versionCode appVersionCode
        versionName appVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        //resConfigs "en", "ru", "es", "fr", "de", "nb", "in", "tr", "ar"
    }

    signingConfigs {
        cidebug {
            storeFile file(System.env.CI_KEYSTORE_PATH ?: "../key/testdebug.jks")
            storePassword System.env.CI_KEYSTORE_PASS ?: "soratestpsw"
            keyAlias System.env.CI_KEYSTORE_KEY_ALIAS ?: "key0"
            keyPassword System.env.CI_KEYSTORE_KEY_PASS ?: "sorakeypw"
        }
    }
    buildTypes {
        release {
            minifyEnabled soraMinifyRelease
            signingConfig signingConfigs.cidebug
            shrinkResources soraMinifyRelease
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            versionNameSuffix '-debug'
            signingConfig signingConfigs.cidebug
        }
        firebasedebug {
//            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            initWith debug
            matchingFallbacks = ['debug']
            versionNameSuffix '-firebase'
            signingConfig signingConfigs.cidebug
            //Init firebase
            def firebaseReleaseNotes = ''
            def firebaseGroup = ''
            if (System.getenv('CI_FIREBASE_RELEASENOTES') != null) {
                firebaseReleaseNotes = System.env.CI_FIREBASE_RELEASENOTES
            }
            if (System.getenv('CI_FIREBASE_GROUP') != null) {
                firebaseGroup = System.env.CI_FIREBASE_GROUP
            }
            firebaseAppDistribution {
                releaseNotes = firebaseReleaseNotes
                groups = firebaseGroup
            }

        }
    }

    buildFeatures {
        viewBinding true
        buildConfig true
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/DEPENDENCIES', 'META-INF/LICENSE', 'META-INF/LICENSE.txt', 'META-INF/license.txt', 'META-INF/NOTICE', 'META-INF/NOTICE.txt', 'META-INF/notice.txt', 'META-INF/ASL2.0', 'META-INF/AL2.0', 'META-INF/LGPL2.1', 'META-INF/INDEX.LIST', 'META-INF/io.netty.versions.properties']
        }
    }


    productFlavors {
        develop {
            applicationIdSuffix ".develop"
            resValue "string", "app_name", "Sora Develop"
            dimension 'default'
            manifestPlaceholders.pathPrefix = "/dev/#/referral"
            manifestPlaceholders.appIcon = "@mipmap/ic_dev_launcher"
            manifestPlaceholders.roundedIcon = "@mipmap/ic_dev_launcher"
        }

        soralution {
            applicationIdSuffix ".communitytesting"
            resValue "string", "app_name", "Soralution"
            dimension 'default'
            manifestPlaceholders.pathPrefix = "/tst/#/referral"
            manifestPlaceholders.appIcon = "@mipmap/ic_soralution_launcher"
            manifestPlaceholders.roundedIcon = "@mipmap/ic_soralution_launcher_rounded"
        }

        tsting {
            applicationIdSuffix ".stage"
            resValue "string", "app_name", "Sora Staging"
            dimension 'default'
            manifestPlaceholders.pathPrefix = "/stg/#/referral"
            manifestPlaceholders.appIcon = "@mipmap/ic_launcher"
            manifestPlaceholders.roundedIcon = "@mipmap/ic_launcher_rounded"
        }

        production {
            resValue "string", "app_name", "Sora"
            dimension 'default'
            manifestPlaceholders.pathPrefix = "/#/referral"
            manifestPlaceholders.appIcon = "@mipmap/ic_prod_launcher"
            manifestPlaceholders.roundedIcon = "@mipmap/ic_prod_launcher_rounded"
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = new File("Sora_" + variant.versionName + "_" + variant.flavorName + "_" + buildType.name + ".apk")
        }
    }

    configurations {
        all*.exclude module: 'bcprov-jdk15on'
    }
    namespace 'jp.co.soramitsu.sora'
}

hilt {
    enableAggregatingTask = true
}

play {
    serviceAccountCredentials = file(System.env.CI_PLAY_KEY ?: "../key/fake.json")
    track = "internal"
    releaseStatus = ReleaseStatus.DRAFT
    releaseName = "3.5.0.0 - SORA IBAN Balance"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(":android-foundation")
    implementation project(":common")
    implementation project(":core_db")
    implementation project(":demeter")
    implementation project(":feature_assets_api")
    implementation project(":feature_assets_impl")
    implementation project(":feature_main_api")
    implementation project(":feature_main_impl")
    implementation project(":feature_multiaccount_api")
    implementation project(":feature_multiaccount_impl")
    implementation project(":feature_referral_api")
    implementation project(":feature_referral_impl")
    implementation project(":feature_account_api")
    implementation project(":feature_account_impl")
    implementation project(":feature_ethereum_api")
    implementation project(":feature_ethereum_impl")
    implementation project(":feature_polkaswap_api")
    implementation project(":feature_polkaswap_impl")
    implementation project(":feature_wallet_api")
    implementation project(":feature_wallet_impl")
    implementation project(":feature_select_node_api")
    implementation project(":feature_select_node_impl")
    implementation project(":feature_blockexplorer_api")
    implementation project(":feature_blockexplorer_impl")
    implementation project(":feature_sora_card_api")
    implementation project(":feature_sora_card_impl")
    implementation project(":feature_ecosystem_api")
    implementation project(":feature_ecosystem_impl")
    implementation project(":sorasubstrate")
    implementation project(":soracrypro")
    implementation project(":network")

    implementation androidDep
    implementation appCompatResourcesDep
    implementation materialDep
    implementation constraintDep

    implementation navigationFragmentDep
    implementation navigationUiDep

    implementation lottieDep
    implementation coilDep
    implementation coilSvgDep

    implementation timberDep

    implementation xsubstrateDep

    implementation daggerDep
    kapt daggerKaptDep
    implementation hiltWorkManagerDep
    kapt hiltWorkManagerKaptDep

    implementation lifecycleProcessDep
    kapt lifecycleKaptDep

    implementation coroutineAndroidDep
    implementation coroutineDep

    implementation platform(googleFirebaseBomDep)
    implementation googleCrashlyticsDep

    implementation webSocketLibDep

    implementation zXingCoreDep
    implementation zXingEmbeddedDep

    implementation gsonDep

    // Tests
    testImplementation project(":test_shared")
}

kapt {
    correctErrorTypes true
}

apply plugin: 'com.google.gms.google-services'
