apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.7"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

afterEvaluate {

    task jacocoTestReport(type: JacocoReport) {
        outputs.cacheIf { true }

        Task runTestsTask

        group "Reporting"
        description "Generate Jacoco coverage reports."

        print "configuring jacoco for project: ${project.name}"

        if (project.tasks.findByName('testDevelopDebugUnitTest')) {
            runTestsTask = project.tasks.findByName('testDevelopDebugUnitTest')
        } else {
            runTestsTask = project.tasks.findByName('testDebugUnitTest')
        }


        dependsOn runTestsTask

        def outputFileName = "coverage/coverage-${project.name}.xml"
        def outputFileNameHtml = "coverage/coverage-${project.name}.html"

        def file = new File("coverage/")
        if (!file.exists()) file.mkdirs()

        reports {
//            xml.enabled = true
//            html.enabled = true
//            html.setDestination(new File(outputFileNameHtml))
//            xml.setDestination(new File(outputFileName))
        }

        outputs.upToDateWhen { false }

        def javaClasses = []
        def kotlinClasses = []
        def sourceDirs = []
        def execution = []

        def fileFilter = ['**/R.class',
                          '**/R$*.class',
                          '**/BuildConfig.*',
                          '**/Manifest*.*',
                          '**/*Test.*',
                          '**/*Activity.*',
                          '**/*Fragment.*',
                          '**/*Worker.*',
                          '**/*Worker*/**',
                          '**/*Adapter.*',
                          '**/*SwipeController.*',
                          '**/*SwipeController*/**',
                          '**/adapter/*.*',
                          '**/*Holder.*',
                          '**/*App.*',
                          '**/*Application.*',
                          '**/*Dialog.*',
                          '**/*BottomSheet.*',
                          '**/*BottomSheet*/**',
                          '**/*Request.*',
                          '**/*Response.*',
                          '**/*Model.*',
                          '**/model/*.*',
                          '**/*Ext.*',
                          '**/*SubstrateApiImpl.*',
                          '**/*SubstrateApiImpl*/**',
                          '**/*Extrinsics*/**',
                          '**/*RxExt*.*',
                          '**/*QrCodeDecoder*.*',
                          '**/*ViewPager.*',
                          '**/*Module.*',
                          '**/*Dependencies.*',
                          '**/*Router.*',
                          '**/*Component.*',
                          '**/*Service.*',
                          '**/*ViewModelFactory.*',
                          '**/*MembersInjector.*',
                          '**/*Api.*',
                          '**/*Dao.*',
                          'android/**/*.*',
                          '**/com/google/protobuf/**/*.*',
                          '**/com/google/api/*.*',
                          '**/data/db/dao/*.*',
                          '**/android/databinding/layouts/*.*',
                          '**/androidx/databinding/library/baseAdapters/*.*',
                          '**/*Activity*',
                          '**/*Fragment*',
                          '**/*Navigator*',
                          '**/*DataBinder*',
                          '**/*DataBinding*',
                          '**/databinding/**',
                          '**/*BR*',
                          '**/*Factory*',
                          '**/*EncryptionUtil*',
                          '**/*Starter*',
                          '**/*ItemDecoration*',
                          '**/*DiffCallback*',
                          '**/*ViewHolder*',
                          '**/di/**',
                          '**/view/**',
        ]

        javaClasses << fileTree(dir: "$buildDir/intermediates/javac/developDebug", excludes: fileFilter)

        kotlinClasses << fileTree(dir: "$buildDir/tmp/kotlin-classes/developDebug", excludes: fileFilter)

        sourceDirs << fileTree(dir: "$projectDir/src/main/java", excludes: fileFilter)

        execution << fileTree(dir: buildDir,
                includes: ["jacoco/${runTestsTask.name}.exec",
                           'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'])

        executionData.setFrom(files(execution))
        sourceDirectories.setFrom(files([sourceDirs]))
        classDirectories.setFrom(files([javaClasses, kotlinClasses]))

        doFirst {
            print "generating jacoco report for project: ${project.name} \n"
            print "sourceDirs = " + sourceDirs + '\n'
            print "execution = " + execution + '\n'
            print "classDirectoriesJava = " + javaClasses + '\n'
            print "classDirectoriesKT = " + kotlinClasses + '\n'
        }
    }
}